#!/bin/bash
# Copyright (c) 2008 by S.Chekanov (chakanau@hep.anl.gov). 

"exec" "python" "-Wignore" "$0" "$@"

__version__ = '1.0'
__author__  = 'Sergei Chekanov  (chekanov@anl.gov)'
__doc__     = 'Create analysis.h'

import os,sys,re,shutil
import glob
import time

from types import *
from array import array
import os; import fileinput; import string;
from ROOT import gROOT,gStyle,TTree,TCanvas,TFile,TLine,TLegend,TPostScript
from ROOT import TH2F,TCut,TPad,TH1F,TF1,TObject,TPaveText,TGraph,TGraphAsymmErrors
from ROOT import TTree,gDirectory
from os import path
import shutil


MyClass="analysis"


# check grid enviroment 
vdt=os.environ.get('ROOTSYS')
if (vdt == None) :  
  print (term.render('${RED} ROOTSYS variable  ${NORMAL}'))
  print (term.render('${RED} Setup ROOT first ${NORMAL}'))
  sys.exit(1);

# set true for debugging options
DEBUG=False 


PWDdir="";
f = os.popen("pwd", "r")
for l in f.readlines():
       l=l.strip()
       PWDdir=l;
       break;

print (PWDdir);

lines=[]
data=[]
ifile=open('data.in','r')
lines=lines+ifile.readlines()      # read file into list of lines
ifile.close()
for i in range(len(lines)):
              xline=lines[i]
              xline=xline.strip()
              if xline.startswith("#"): continue
              ii=xline.find("root");
              if (ii>-1):
                     data.append(xline)  

print ("Build tree for"+data[0]) 

############## generate hearder ################
f1=TFile(data[0])
f1.ls()
mytree=input('Please enter a valid ROOT tree from the output above:')
print ("\"",mytree,"\" was selected!") 

tree=f1.Get(mytree)
if type(tree) is NoneType: 
                      print ("\"",mytree,"\" is not valid tree!") 
                      sys.exit(1);  

# generate
tree.MakeClass(MyClass);
# shutil.copyfile(mytree+'.h', 'myjob.h')
# shutil.copyfile(mytree+'.C', 'myjob.cxx') 
os.remove(MyClass+'.C')


ADD= "using namespace std;\n#include <vector>\n#include <map>\n#include <TClonesArray.h>\n#include <TLorentzVector.h>\n"

def line_prepender(filename, line):
    with open(filename, 'r+') as f:
        content = f.read()
        f.seek(0, 0)
        f.write(line.rstrip('\r\n') + '\n' + content)

line_prepender("analysis.h",ADD)

